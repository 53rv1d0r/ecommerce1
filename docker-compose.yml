services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: dev2-laravel
    container_name: dev2-app-laravel-fpm
    # ¡No exponemos el puerto 80 aquí! PHP-FPM escucha en el puerto 9000 internamente.
    # El servidor web se conectará a este contenedor en el puerto 9000.
    #ports:
        # Puerto 8000 de máquina host ocupado por Portainer
        # Sirviendo aplicación en puerto 8081 de máquina host, puerto docker 80 (por defecto para Apache)
      #- "8081:80"
    volumes:
      - .:/var/www/html
    # --- AQUÍ ES DONDE LEEMOS DEL ARCHIVO .env ---
    environment:
      - APP_NAME=${APP_NAME} # Lee APP_NAME del .env
      - APP_ENV=${APP_ENV}   # Lee APP_ENV del .env
      # --- IMPORTANTE: AHORA LEE APP_KEY DEL .env ---
      - APP_KEY=${APP_KEY}
      - APP_DEBUG=${APP_DEBUG} # Lee APP_DEBUG del .env
      - APP_URL=${APP_URL:-http://localhost:8081}  # Lee APP_URL del .env, usa valor por defecto si no está
      - DB_CONNECTION=${DB_CONNECTION} # Lee DB_CONNECTION del .env
      # Cuando usas Docker Compose, DB_HOST debe ser el nombre del servicio de la base de datos (mysql)
      - DB_HOST=mysql
      - DB_PORT=${DB_PORT}       # Lee DB_PORT del .env
      - DB_DATABASE=${DB_DATABASE} # Lee DB_DATABASE del .env
      - DB_USERNAME=${DB_USERNAME} # Lee DB_USERNAME del .env
      # --- IMPORTANTE: AHORA LEE DB_PASSWORD DEL .env ---
      - DB_PASSWORD=${DB_PASSWORD}
    depends_on:
      - mysql

  # --- SERVIDOR WEB (Apache) ---
  webserver:
    build:
      context: .
      dockerfile: webserver.Dockerfile
    image: dev2-apache
    container_name: dev2-webserver
    ports:
      - "8081:80"
    volumes:
      - .:/var/www/html
      # Si necesitas logs de Apache persistentes, podrías montarlos aquí
      # - apache_logs:/usr/local/apache2/logs/
    environment:
      - APACHE_LOG_DIR=/usr/local/apache2/logs # Esta variable no es sensible, puede quedarse
    depends_on:
      - app

  mysql:
    image: mysql:8.0
    container_name: db-mysql
    ports:
      - "3306:3306"
    # --- AQUÍ TAMBIÉN LEEMOS DEL ARCHIVO .env ---
    environment:
      # --- IMPORTANTE: AHORA LEE PASSWORD/USER DEL .env ---
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD} # Usamos la misma variable DB_PASSWORD del .env
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD} # Usamos la misma variable DB_PASSWORD del .env
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      # Asegúrate de que el comando healthcheck también use variables de entorno si necesita la contraseña
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${DB_USERNAME}", "-p${DB_PASSWORD}"] # Modificado
      timeout: 20s
      retries: 3
      start_period: 10s

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: phpmyadmin
    ports:
      - "8080:80"
    # --- Y AQUÍ TAMBIÉN ---
    environment:
      PMA_HOST: mysql # El nombre del servicio de la DB
      PMA_PORT: ${DB_PORT}
      PMA_USER: ${DB_USERNAME}
      PMA_PASSWORD: ${DB_PASSWORD}
    depends_on:
      - mysql

volumes:
  mysql_data:
    driver: local
  # Si descomentaste la línea de logs para persistencia, añade el volumen aquí:
  # apache_logs:
  #   driver: local